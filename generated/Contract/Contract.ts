// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TreasuryIssued extends ethereum.Event {
  get params(): TreasuryIssued__Params {
    return new TreasuryIssued__Params(this);
  }
}

export class TreasuryIssued__Params {
  _event: TreasuryIssued;

  constructor(event: TreasuryIssued) {
    this._event = event;
  }

  get _id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _rate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TreasuryPaid extends ethereum.Event {
  get params(): TreasuryPaid__Params {
    return new TreasuryPaid__Params(this);
  }
}

export class TreasuryPaid__Params {
  _event: TreasuryPaid;

  constructor(event: TreasuryPaid) {
    this._event = event;
  }

  get _investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TreasuryPurchased extends ethereum.Event {
  get params(): TreasuryPurchased__Params {
    return new TreasuryPurchased__Params(this);
  }
}

export class TreasuryPurchased__Params {
  _event: TreasuryPurchased;

  constructor(event: TreasuryPurchased) {
    this._event = event;
  }

  get _investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__getTreasuryAccountResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class Contract__getTreasuryDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Contract__treasuryResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getTreasuryAccount(
    _id: BigInt,
    _investor: Address
  ): Contract__getTreasuryAccountResult {
    let result = super.call(
      "getTreasuryAccount",
      "getTreasuryAccount(uint256,address):(uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromAddress(_investor)
      ]
    );

    return new Contract__getTreasuryAccountResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_getTreasuryAccount(
    _id: BigInt,
    _investor: Address
  ): ethereum.CallResult<Contract__getTreasuryAccountResult> {
    let result = super.tryCall(
      "getTreasuryAccount",
      "getTreasuryAccount(uint256,address):(uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromAddress(_investor)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getTreasuryAccountResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  getTreasuryCount(): BigInt {
    let result = super.call(
      "getTreasuryCount",
      "getTreasuryCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTreasuryCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTreasuryCount",
      "getTreasuryCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTreasuryDetails(_id: BigInt): Contract__getTreasuryDetailsResult {
    let result = super.call(
      "getTreasuryDetails",
      "getTreasuryDetails(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return new Contract__getTreasuryDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getTreasuryDetails(
    _id: BigInt
  ): ethereum.CallResult<Contract__getTreasuryDetailsResult> {
    let result = super.tryCall(
      "getTreasuryDetails",
      "getTreasuryDetails(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getTreasuryDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getTreasuryFundsByUser(_user: Address): BigInt {
    let result = super.call(
      "getTreasuryFundsByUser",
      "getTreasuryFundsByUser(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getTreasuryFundsByUser(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTreasuryFundsByUser",
      "getTreasuryFundsByUser(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTreasuryOwners(_id: BigInt): Array<Address> {
    let result = super.call(
      "getTreasuryOwners",
      "getTreasuryOwners(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toAddressArray();
  }

  try_getTreasuryOwners(_id: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTreasuryOwners",
      "getTreasuryOwners(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalLocked(): BigInt {
    let result = super.call("totalLocked", "totalLocked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLocked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLocked", "totalLocked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(param0: BigInt): Contract__treasuryResult {
    let result = super.call(
      "treasury",
      "treasury(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__treasuryResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean()
    );
  }

  try_treasury(param0: BigInt): ethereum.CallResult<Contract__treasuryResult> {
    let result = super.tryCall(
      "treasury",
      "treasury(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__treasuryResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean()
      )
    );
  }

  treasuryCount(): BigInt {
    let result = super.call("treasuryCount", "treasuryCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_treasuryCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "treasuryCount",
      "treasuryCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verify(): BigInt {
    let result = super.call("verify", "verify():(uint256)", []);

    return result[0].toBigInt();
  }

  try_verify(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("verify", "verify():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wasPaid(_id: BigInt, _investor: Address): boolean {
    let result = super.call("wasPaid", "wasPaid(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id),
      ethereum.Value.fromAddress(_investor)
    ]);

    return result[0].toBoolean();
  }

  try_wasPaid(_id: BigInt, _investor: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("wasPaid", "wasPaid(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id),
      ethereum.Value.fromAddress(_investor)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyTreasuryCall extends ethereum.Call {
  get inputs(): BuyTreasuryCall__Inputs {
    return new BuyTreasuryCall__Inputs(this);
  }

  get outputs(): BuyTreasuryCall__Outputs {
    return new BuyTreasuryCall__Outputs(this);
  }
}

export class BuyTreasuryCall__Inputs {
  _call: BuyTreasuryCall;

  constructor(call: BuyTreasuryCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyTreasuryCall__Outputs {
  _call: BuyTreasuryCall;

  constructor(call: BuyTreasuryCall) {
    this._call = call;
  }
}

export class IssueTreasuryCall extends ethereum.Call {
  get inputs(): IssueTreasuryCall__Inputs {
    return new IssueTreasuryCall__Inputs(this);
  }

  get outputs(): IssueTreasuryCall__Outputs {
    return new IssueTreasuryCall__Outputs(this);
  }
}

export class IssueTreasuryCall__Inputs {
  _call: IssueTreasuryCall;

  constructor(call: IssueTreasuryCall) {
    this._call = call;
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class IssueTreasuryCall__Outputs {
  _call: IssueTreasuryCall;

  constructor(call: IssueTreasuryCall) {
    this._call = call;
  }
}

export class PayTreasuryCall extends ethereum.Call {
  get inputs(): PayTreasuryCall__Inputs {
    return new PayTreasuryCall__Inputs(this);
  }

  get outputs(): PayTreasuryCall__Outputs {
    return new PayTreasuryCall__Outputs(this);
  }
}

export class PayTreasuryCall__Inputs {
  _call: PayTreasuryCall;

  constructor(call: PayTreasuryCall) {
    this._call = call;
  }

  get _investor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PayTreasuryCall__Outputs {
  _call: PayTreasuryCall;

  constructor(call: PayTreasuryCall) {
    this._call = call;
  }
}
